import {
  Customer,
  InsertCustomer,
  Product,
  InsertProduct,
  Deal,
  InsertDeal,
  Ticket,
  InsertTicket,
  Task,
  InsertTask,
  TeamMember,
  InsertTeamMember,
  ActivityLog,
  InsertActivityLog,
  RevenueMetric,
  InsertRevenueMetric,
  CategorySale,
  InsertCategorySale,
} from "@shared/schema";

export interface IStorage {
  // Customer operations
  getCustomers(): Promise<Customer[]>;
  getCustomer(id: number): Promise<Customer | undefined>;
  createCustomer(customer: InsertCustomer): Promise<Customer>;
  updateCustomer(id: number, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;
  deleteCustomer(id: number): Promise<boolean>;
  getCustomersWithChurnRisk(): Promise<Customer[]>; // New method for churn risk
  getCustomerEngagementMetrics(id: number): Promise<any>; // Customer engagement data

  // Product operations
  getProducts(): Promise<Product[]>;
  getProduct(id: number): Promise<Product | undefined>;
  createProduct(product: InsertProduct): Promise<Product>;
  updateProduct(id: number, product: Partial<InsertProduct>): Promise<Product | undefined>;
  deleteProduct(id: number): Promise<boolean>;
  getProductInventory(): Promise<Product[]>; // Get products with stock info
  getProductPerformance(id: number): Promise<any>; // Get product performance data

  // Deal operations
  getDeals(): Promise<Deal[]>;
  getDeal(id: number): Promise<Deal | undefined>;
  createDeal(deal: InsertDeal): Promise<Deal>;
  updateDeal(id: number, deal: Partial<InsertDeal>): Promise<Deal | undefined>;
  deleteDeal(id: number): Promise<boolean>;
  getDealsByStage(stage: string): Promise<Deal[]>; // Get deals by pipeline stage
  getDealsByAssignee(assignee: string): Promise<Deal[]>; // Get deals by team member

  // Ticket operations
  getTickets(): Promise<Ticket[]>;
  getTicket(id: number): Promise<Ticket | undefined>;
  createTicket(ticket: InsertTicket): Promise<Ticket>;
  updateTicket(id: number, ticket: Partial<InsertTicket>): Promise<Ticket | undefined>;
  deleteTicket(id: number): Promise<boolean>;
  getTicketsByStatus(status: string): Promise<Ticket[]>; // Get tickets by status
  getTicketsByAssignee(assignee: string): Promise<Ticket[]>; // Get tickets by assignee

  // Task operations
  getTasks(): Promise<Task[]>;
  getTask(id: number): Promise<Task | undefined>;
  createTask(task: InsertTask): Promise<Task>;
  updateTask(id: number, task: Partial<InsertTask>): Promise<Task | undefined>;
  deleteTask(id: number): Promise<boolean>;
  getTasksByAssignee(assignee: string): Promise<Task[]>; // Get tasks by assignee
  getTasksByStatus(status: string): Promise<Task[]>; // Get tasks by status

  // Team operations
  getTeamMembers(): Promise<TeamMember[]>;
  getTeamMember(id: number): Promise<TeamMember | undefined>;
  createTeamMember(member: InsertTeamMember): Promise<TeamMember>;
  updateTeamMember(id: number, member: Partial<InsertTeamMember>): Promise<TeamMember | undefined>;
  deleteTeamMember(id: number): Promise<boolean>;
  getTeamPerformanceMetrics(): Promise<any>; // Get team performance data

  // Activity operations
  getActivityLogs(): Promise<ActivityLog[]>;
  getActivityLog(id: number): Promise<ActivityLog | undefined>;
  createActivityLog(log: InsertActivityLog): Promise<ActivityLog>;
  deleteActivityLog(id: number): Promise<boolean>;
  getActivitiesByRelation(relatedTo: string): Promise<ActivityLog[]>; // Get activities by relation

  // Dashboard metrics
  getRevenueMetrics(): Promise<RevenueMetric[]>;
  getCategorySales(): Promise<CategorySale[]>;
  getTopProducts(limit: number): Promise<Product[]>;
  getRecentCustomers(limit: number): Promise<Customer[]>;
  getChurnMetrics(): Promise<any>; // Get churn prediction metrics
  getTeamAnalytics(): Promise<any>; // Get team performance analytics
  getSalesPerformance(): Promise<any>; // Get sales performance metrics  
}

export class MemStorage implements IStorage {
  private customers: Map<number, Customer>;
  private products: Map<number, Product>;
  private deals: Map<number, Deal>;
  private tickets: Map<number, Ticket>;
  private tasks: Map<number, Task>;
  private teamMembers: Map<number, TeamMember>;
  private activityLogs: Map<number, ActivityLog>;
  private revenueMetrics: Map<number, RevenueMetric>;
  private categorySales: Map<number, CategorySale>;
  private customerCurrentId: number;
  private productCurrentId: number;
  private dealCurrentId: number;
  private ticketCurrentId: number;
  private taskCurrentId: number;
  private teamMemberCurrentId: number;
  private activityLogCurrentId: number;
  private revenueMetricCurrentId: number;
  private categorySaleCurrentId: number;

  constructor() {
    this.customers = new Map();
    this.products = new Map();
    this.deals = new Map();
    this.tickets = new Map();
    this.tasks = new Map();
    this.teamMembers = new Map();
    this.activityLogs = new Map();
    this.revenueMetrics = new Map();
    this.categorySales = new Map();
    this.customerCurrentId = 1;
    this.productCurrentId = 1;
    this.dealCurrentId = 1;
    this.ticketCurrentId = 1;
    this.taskCurrentId = 1;
    this.teamMemberCurrentId = 1;
    this.activityLogCurrentId = 1;
    this.revenueMetricCurrentId = 1;
    this.categorySaleCurrentId = 1;

    // Initialize with some sample data
    this.initSampleData();
  }

  // Customer operations
  async getCustomers(): Promise<Customer[]> {
    return Array.from(this.customers.values());
  }

  async getCustomer(id: number): Promise<Customer | undefined> {
    return this.customers.get(id);
  }

  async createCustomer(customerData: InsertCustomer): Promise<Customer> {
    const id = this.customerCurrentId++;
    const customer: Customer = { ...customerData, id };
    this.customers.set(id, customer);
    return customer;
  }

  async updateCustomer(id: number, customerData: Partial<InsertCustomer>): Promise<Customer | undefined> {
    const existingCustomer = this.customers.get(id);
    if (!existingCustomer) return undefined;

    const updatedCustomer = { ...existingCustomer, ...customerData };
    this.customers.set(id, updatedCustomer);
    return updatedCustomer;
  }

  async deleteCustomer(id: number): Promise<boolean> {
    return this.customers.delete(id);
  }

  // Product operations
  async getProducts(): Promise<Product[]> {
    return Array.from(this.products.values());
  }

  async getProduct(id: number): Promise<Product | undefined> {
    return this.products.get(id);
  }

  async createProduct(productData: InsertProduct): Promise<Product> {
    const id = this.productCurrentId++;
    const product: Product = { ...productData, id };
    this.products.set(id, product);
    return product;
  }

  async updateProduct(id: number, productData: Partial<InsertProduct>): Promise<Product | undefined> {
    const existingProduct = this.products.get(id);
    if (!existingProduct) return undefined;

    const updatedProduct = { ...existingProduct, ...productData };
    this.products.set(id, updatedProduct);
    return updatedProduct;
  }

  async deleteProduct(id: number): Promise<boolean> {
    return this.products.delete(id);
  }

  // Deal operations
  async getDeals(): Promise<Deal[]> {
    return Array.from(this.deals.values());
  }

  async getDeal(id: number): Promise<Deal | undefined> {
    return this.deals.get(id);
  }

  async createDeal(dealData: InsertDeal): Promise<Deal> {
    const id = this.dealCurrentId++;
    const now = new Date();
    const deal: Deal = { 
      ...dealData, 
      id, 
      createdAt: now, 
      updatedAt: now 
    };
    this.deals.set(id, deal);
    return deal;
  }

  async updateDeal(id: number, dealData: Partial<InsertDeal>): Promise<Deal | undefined> {
    const existingDeal = this.deals.get(id);
    if (!existingDeal) return undefined;

    const updatedDeal = { 
      ...existingDeal, 
      ...dealData, 
      updatedAt: new Date() 
    };
    this.deals.set(id, updatedDeal);
    return updatedDeal;
  }

  async deleteDeal(id: number): Promise<boolean> {
    return this.deals.delete(id);
  }

  // Ticket operations
  async getTickets(): Promise<Ticket[]> {
    return Array.from(this.tickets.values());
  }

  async getTicket(id: number): Promise<Ticket | undefined> {
    return this.tickets.get(id);
  }

  async createTicket(ticketData: InsertTicket): Promise<Ticket> {
    const id = this.ticketCurrentId++;
    const now = new Date();
    const ticket: Ticket = { 
      ...ticketData, 
      id, 
      createdAt: now, 
      updatedAt: now 
    };
    this.tickets.set(id, ticket);
    return ticket;
  }

  async updateTicket(id: number, ticketData: Partial<InsertTicket>): Promise<Ticket | undefined> {
    const existingTicket = this.tickets.get(id);
    if (!existingTicket) return undefined;

    const updatedTicket = { 
      ...existingTicket, 
      ...ticketData, 
      updatedAt: new Date() 
    };
    this.tickets.set(id, updatedTicket);
    return updatedTicket;
  }

  async deleteTicket(id: number): Promise<boolean> {
    return this.tickets.delete(id);
  }

  async getTicketsByStatus(status: string): Promise<Ticket[]> {
    return Array.from(this.tickets.values()).filter(ticket => ticket.status === status);
  }

  async getTicketsByAssignee(assignee: string): Promise<Ticket[]> {
    return Array.from(this.tickets.values()).filter(ticket => ticket.assignedTo === assignee);
  }

  // Task operations
  async getTasks(): Promise<Task[]> {
    return Array.from(this.tasks.values());
  }

  async getTask(id: number): Promise<Task | undefined> {
    return this.tasks.get(id);
  }

  async createTask(taskData: InsertTask): Promise<Task> {
    const id = this.taskCurrentId++;
    const now = new Date();
    const task: Task = {
      ...taskData,
      id,
      createdAt: now,
      updatedAt: now
    };
    this.tasks.set(id, task);
    return task;
  }

  async updateTask(id: number, taskData: Partial<InsertTask>): Promise<Task | undefined> {
    const existingTask = this.tasks.get(id);
    if (!existingTask) return undefined;

    const updatedTask = {
      ...existingTask,
      ...taskData,
      updatedAt: new Date()
    };
    this.tasks.set(id, updatedTask);
    return updatedTask;
  }

  async deleteTask(id: number): Promise<boolean> {
    return this.tasks.delete(id);
  }

  async getTasksByAssignee(assignee: string): Promise<Task[]> {
    return Array.from(this.tasks.values()).filter(task => task.assignedTo === assignee);
  }

  async getTasksByStatus(status: string): Promise<Task[]> {
    return Array.from(this.tasks.values()).filter(task => task.status === status);
  }

  // Team operations
  async getTeamMembers(): Promise<TeamMember[]> {
    return Array.from(this.teamMembers.values());
  }

  async getTeamMember(id: number): Promise<TeamMember | undefined> {
    return this.teamMembers.get(id);
  }

  async createTeamMember(memberData: InsertTeamMember): Promise<TeamMember> {
    const id = this.teamMemberCurrentId++;
    const member: TeamMember = {
      ...memberData,
      id
    };
    this.teamMembers.set(id, member);
    return member;
  }

  async updateTeamMember(id: number, memberData: Partial<InsertTeamMember>): Promise<TeamMember | undefined> {
    const existingMember = this.teamMembers.get(id);
    if (!existingMember) return undefined;

    const updatedMember = {
      ...existingMember,
      ...memberData
    };
    this.teamMembers.set(id, updatedMember);
    return updatedMember;
  }

  async deleteTeamMember(id: number): Promise<boolean> {
    return this.teamMembers.delete(id);
  }

  async getTeamPerformanceMetrics(): Promise<any> {
    const teamMembers = Array.from(this.teamMembers.values());
    // Calculate overall team metrics
    const totalDealsWon = teamMembers.reduce((sum, member) => sum + (member.dealsWon || 0), 0);
    const totalTicketsResolved = teamMembers.reduce((sum, member) => sum + (member.ticketsResolved || 0), 0);
    const averagePerformance = teamMembers.reduce((sum, member) => sum + Number(member.performanceScore || 0), 0) / teamMembers.length;

    return {
      teamSize: teamMembers.length,
      totalDealsWon,
      totalTicketsResolved,
      averagePerformance: averagePerformance.toFixed(2),
      memberPerformance: teamMembers.map(member => ({
        id: member.id,
        name: member.name,
        performance: member.performanceScore,
        dealsWon: member.dealsWon,
        ticketsResolved: member.ticketsResolved
      }))
    };
  }

  // Activity operations
  async getActivityLogs(): Promise<ActivityLog[]> {
    return Array.from(this.activityLogs.values());
  }

  async getActivityLog(id: number): Promise<ActivityLog | undefined> {
    return this.activityLogs.get(id);
  }

  async createActivityLog(logData: InsertActivityLog): Promise<ActivityLog> {
    const id = this.activityLogCurrentId++;
    const now = new Date();
    const log: ActivityLog = {
      ...logData,
      id,
      createdAt: now
    };
    this.activityLogs.set(id, log);
    return log;
  }

  async deleteActivityLog(id: number): Promise<boolean> {
    return this.activityLogs.delete(id);
  }

  async getActivitiesByRelation(relatedTo: string): Promise<ActivityLog[]> {
    return Array.from(this.activityLogs.values()).filter(log => log.relatedTo === relatedTo);
  }

  // Customer advanced operations
  async getCustomersWithChurnRisk(): Promise<Customer[]> {
    // In a real system, this would use ML models or complex business rules
    // For this demo, we'll use a simple heuristic
    const threeMonthsAgo = new Date();
    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);
    
    return Array.from(this.customers.values())
      .filter(customer => {
        // Consider a customer at risk if:
        // 1. They haven't made an order in last 3 months
        // 2. Their total spent is above a certain threshold (they're valuable)
        const lastOrder = customer.lastOrderDate ? new Date(customer.lastOrderDate) : null;
        const isInactive = !lastOrder || lastOrder < threeMonthsAgo;
        const isValuable = Number(customer.totalSpent || 0) > 25000;
        
        return isInactive && isValuable;
      });
  }

  async getCustomerEngagementMetrics(id: number): Promise<any> {
    const customer = await this.getCustomer(id);
    if (!customer) return null;

    // Get customer-related data
    const deals = Array.from(this.deals.values()).filter(deal => deal.customerId === id);
    const tickets = Array.from(this.tickets.values()).filter(ticket => ticket.customerId === id);
    const activities = Array.from(this.activityLogs.values()).filter(log => log.relatedTo === `customer:${id}`);

    const totalSpent = Number(customer.totalSpent || 0);
    const activeDeals = deals.filter(deal => deal.stage !== 'closed' && deal.stage !== 'lost').length;
    const wonDeals = deals.filter(deal => deal.stage === 'closed').length;
    const dealValue = deals.reduce((sum, deal) => sum + Number(deal.value || 0), 0);
    const avgResponseTime = tickets.length > 0 
      ? tickets.reduce((sum, ticket) => {
          const created = new Date(ticket.createdAt);
          const updated = new Date(ticket.updatedAt);
          return sum + (updated.getTime() - created.getTime()) / (1000 * 60 * 60); // hours
        }, 0) / tickets.length
      : 0;

    return {
      customerValue: {
        totalSpent,
        dealValue,
        lifetimeValue: totalSpent + dealValue
      },
      activity: {
        totalDeals: deals.length,
        activeDeals,
        wonDeals,
        totalTickets: tickets.length,
        lastActivity: activities.length > 0 
          ? Math.max(...activities.map(a => new Date(a.createdAt).getTime()))
          : null,
        interactions: activities.length
      },
      support: {
        openTickets: tickets.filter(t => t.status === 'open').length,
        avgResponseTime: avgResponseTime.toFixed(2),
        satisfaction: tickets.reduce((sum, t) => sum + (t.satisfaction || 0), 0) / tickets.length
      },
      churnRisk: {
        score: calculateChurnScore(customer, deals, tickets, activities),
        lastOrder: customer.lastOrderDate,
        factors: getChurnFactors(customer, deals, tickets)
      }
    };
  }

  // Product advanced operations
  async getProductInventory(): Promise<Product[]> {
    return Array.from(this.products.values())
      .map(product => ({
        ...product,
        stockAvailable: product.stockAvailable || 0,
        reorderLevel: product.reorderLevel || 0,
        needsRestock: (product.stockAvailable || 0) < (product.reorderLevel || 0)
      }));
  }

  async getProductPerformance(id: number): Promise<any> {
    const product = await this.getProduct(id);
    if (!product) return null;

    // Calculate product performance metrics
    const totalSales = Math.floor(Math.random() * 100) + 50; // Simulated data
    const conversionRate = (Math.random() * 0.3 + 0.1).toFixed(2);
    const monthlyTrend = Array.from({ length: 6 }, (_, i) => ({
      month: new Date(2023, i, 1).toLocaleString('en-US', { month: 'short' }),
      sales: Math.floor(Math.random() * 30) + 10,
      revenue: (Math.floor(Math.random() * 50) + 30) * Number(product.price || 0) * 0.01
    }));

    return {
      sales: {
        total: totalSales,
        lastMonth: monthlyTrend[monthlyTrend.length - 1].sales,
        trend: product.trend
      },
      performance: {
        conversionRate,
        avgOrderValue: Number(product.price || 0) * 0.8,
        repurchaseRate: (Math.random() * 0.25 + 0.05).toFixed(2)
      },
      monthlyTrend,
      relatedProducts: Array.from(this.products.values())
        .filter(p => p.id !== id && p.category === product.category)
        .slice(0, 3)
        .map(p => ({ id: p.id, name: p.name }))
    };
  }

  // Deal advanced operations
  async getDealsByStage(stage: string): Promise<Deal[]> {
    return Array.from(this.deals.values()).filter(deal => deal.stage === stage);
  }

  async getDealsByAssignee(assignee: string): Promise<Deal[]> {
    return Array.from(this.deals.values()).filter(deal => deal.assignedTo === assignee);
  }

  // Dashboard metrics
  async getRevenueMetrics(): Promise<RevenueMetric[]> {
    return Array.from(this.revenueMetrics.values());
  }

  async getCategorySales(): Promise<CategorySale[]> {
    return Array.from(this.categorySales.values());
  }

  async getTopProducts(limit: number): Promise<Product[]> {
    return Array.from(this.products.values())
      .sort((a, b) => Number(b.price) - Number(a.price))
      .slice(0, limit);
  }

  async getRecentCustomers(limit: number): Promise<Customer[]> {
    return Array.from(this.customers.values())
      .sort((a, b) => {
        if (!a.lastOrderDate) return 1;
        if (!b.lastOrderDate) return -1;
        return new Date(b.lastOrderDate).getTime() - new Date(a.lastOrderDate).getTime();
      })
      .slice(0, limit);
  }

  async getChurnMetrics(): Promise<any> {
    const customers = Array.from(this.customers.values());
    const totalCustomers = customers.length;
    const atRiskCustomers = await this.getCustomersWithChurnRisk();
    const churnRate = (atRiskCustomers.length / totalCustomers * 100).toFixed(2);

    // Simulated monthly churn data
    const monthlyChurn = Array.from({ length: 6 }, (_, i) => ({
      month: new Date(2023, i, 1).toLocaleString('en-US', { month: 'short' }),
      churnRate: (Math.random() * 3 + 1).toFixed(2),
      newCustomers: Math.floor(Math.random() * 15) + 5,
      lostCustomers: Math.floor(Math.random() * 10) + 1
    }));

    return {
      currentChurnRate: churnRate,
      atRiskCount: atRiskCustomers.length,
      totalCustomers,
      atRiskPercentage: (atRiskCustomers.length / totalCustomers * 100).toFixed(2),
      monthlyChurn,
      topChurnReasons: [
        { reason: 'Lack of engagement', percentage: 35 },
        { reason: 'Competitor offers', percentage: 25 },
        { reason: 'Product fit issues', percentage: 20 },
        { reason: 'Price sensitivity', percentage: 15 },
        { reason: 'Poor support experience', percentage: 5 }
      ]
    };
  }

  async getTeamAnalytics(): Promise<any> {
    // Generate synthetic team performance data
    const performanceByDepartment = [
      { department: 'Sales', performance: 87, headcount: 12 },
      { department: 'Support', performance: 92, headcount: 8 },
      { department: 'Marketing', performance: 78, headcount: 5 },
      { department: 'Product', performance: 84, headcount: 7 }
    ];

    const topPerformers = Array.from(this.teamMembers.values())
      .sort((a, b) => Number(b.performanceScore || 0) - Number(a.performanceScore || 0))
      .slice(0, 5)
      .map(member => ({
        id: member.id,
        name: member.name,
        role: member.role,
        performance: member.performanceScore,
        dealsWon: member.dealsWon
      }));

    return {
      teamSize: Array.from(this.teamMembers.values()).length,
      averagePerformance: 84.5,
      performanceByDepartment,
      topPerformers,
      dealsByStage: [
        { stage: 'lead', count: await this.getDealsByStage('lead').then(deals => deals.length) },
        { stage: 'qualified', count: await this.getDealsByStage('qualified').then(deals => deals.length) },
        { stage: 'proposal', count: await this.getDealsByStage('proposal').then(deals => deals.length) },
        { stage: 'negotiation', count: await this.getDealsByStage('negotiation').then(deals => deals.length) },
        { stage: 'closed', count: await this.getDealsByStage('closed').then(deals => deals.length) }
      ]
    };
  }

  async getSalesPerformance(): Promise<any> {
    const deals = Array.from(this.deals.values());
    const totalDealsValue = deals.reduce((sum, deal) => sum + Number(deal.value || 0), 0);
    const closedDeals = deals.filter(deal => deal.stage === 'closed');
    const closedDealsValue = closedDeals.reduce((sum, deal) => sum + Number(deal.value || 0), 0);
    const winRate = closedDeals.length / deals.length * 100;
    
    // Sales trends by month (simulated data)
    const monthlyTrends = Array.from({ length: 6 }, (_, i) => {
      const month = new Date(2023, i, 1).toLocaleString('en-US', { month: 'short' });
      const revenue = Math.floor(Math.random() * 1000000) + 500000;
      const deals = Math.floor(Math.random() * 20) + 10;
      return { month, revenue, deals };
    });

    return {
      pipeline: {
        totalValue: totalDealsValue,
        closedValue: closedDealsValue,
        activeValue: totalDealsValue - closedDealsValue,
        winRate: winRate.toFixed(2)
      },
      conversion: {
        leadToQualified: (Math.random() * 30 + 40).toFixed(2),
        qualifiedToProposal: (Math.random() * 20 + 60).toFixed(2),
        proposalToClose: (Math.random() * 15 + 70).toFixed(2),
        avgDealCycle: Math.floor(Math.random() * 20) + 30 // days
      },
      salesByRegion: [
        { region: 'North', value: Math.floor(Math.random() * 500000) + 200000 },
        { region: 'South', value: Math.floor(Math.random() * 400000) + 300000 },
        { region: 'East', value: Math.floor(Math.random() * 600000) + 400000 },
        { region: 'West', value: Math.floor(Math.random() * 450000) + 350000 }
      ],
      monthlyTrends,
      forecast: {
        nextMonth: Math.floor(Math.random() * 600000) + 800000,
        nextQuarter: Math.floor(Math.random() * 2000000) + 2500000,
        growthRate: (Math.random() * 10 + 5).toFixed(2)
      }
    };
  }
}

// Helper functions for churn analysis
function calculateChurnScore(customer: Customer, deals: Deal[], tickets: Ticket[], activities: ActivityLog[]): number {
  // Higher score = higher risk of churn (0-100)
  let score = 0;
  
  // Inactivity factor
  if (customer.lastOrderDate) {
    const daysSinceLastOrder = (Date.now() - new Date(customer.lastOrderDate).getTime()) / (1000 * 60 * 60 * 24);
    score += Math.min(daysSinceLastOrder / 2, 30); // Up to 30 points for inactivity
  } else {
    score += 30;
  }
  
  // Support ticket factor
  const unresolved = tickets.filter(t => t.status === 'open').length;
  score += unresolved * 10; // 10 points per unresolved ticket
  
  // Deal engagement factor
  const activeDeals = deals.filter(d => d.stage !== 'closed' && d.stage !== 'lost').length;
  score -= activeDeals * 5; // -5 points per active deal (reduces churn risk)
  
  // Recent interaction factor
  if (activities.length > 0) {
    const latestActivity = new Date(
      Math.max(...activities.map(a => new Date(a.createdAt).getTime()))
    );
    const daysSinceActivity = (Date.now() - latestActivity.getTime()) / (1000 * 60 * 60 * 24);
    score += Math.min(daysSinceActivity / 3, 20); // Up to 20 points for no recent activity
  } else {
    score += 20;
  }
  
  // Ensure score is within 0-100 range
  return Math.max(0, Math.min(100, score));
}

function getChurnFactors(customer: Customer, deals: Deal[], tickets: Ticket[]): string[] {
  const factors = [];
  
  // Analyze inactivity
  if (customer.lastOrderDate) {
    const daysSinceLastOrder = (Date.now() - new Date(customer.lastOrderDate).getTime()) / (1000 * 60 * 60 * 24);
    if (daysSinceLastOrder > 90) {
      factors.push('No orders in past 90 days');
    }
  } else {
    factors.push('No order history');
  }
  
  // Analyze support experience
  const unresolved = tickets.filter(t => t.status === 'open').length;
  if (unresolved > 0) {
    factors.push(`${unresolved} unresolved support tickets`);
  }
  
  // Analyze deal engagement
  const lostDeals = deals.filter(d => d.stage === 'lost').length;
  if (lostDeals > 0) {
    factors.push(`${lostDeals} lost opportunities`);
  }
  
  // Add default factor if none found
  if (factors.length === 0) {
    factors.push('Regular engagement patterns');
  }
  
  return factors;
}

export const storage = new MemStorage();
      status: "active",
      totalSpent: "42500",
      lastOrderDate: new Date("2023-05-15"),
      avatar: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=250"
    });
    
    this.createCustomer({
      name: "Sarah Williams",
      email: "sarah@innovatedesign.com",
      companyName: "Innovate Design Co.",
      phone: "+91-9876543211",
      status: "active",
      totalSpent: "28700",
      lastOrderDate: new Date("2023-05-10"),
      avatar: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=250"
    });
    
    this.createCustomer({
      name: "David Rodriguez",
      email: "david@globalenterprises.com",
      companyName: "Global Enterprises Ltd.",
      phone: "+91-9876543212",
      status: "active",
      totalSpent: "56200",
      lastOrderDate: new Date("2023-05-05"),
      avatar: "https://images.unsplash.com/photo-1506794778202-cad84cf45f1d?w=250"
    });
    
    this.createCustomer({
      name: "Emily Chen",
      email: "emily@nextgen.com",
      companyName: "NextGen Solutions",
      phone: "+91-9876543213",
      status: "active",
      totalSpent: "31450",
      lastOrderDate: new Date("2023-04-28"),
      avatar: "https://images.unsplash.com/photo-1517841905240-472988babdf9?w=250"
    });

    // Sample products
    this.createProduct({
      name: "Enterprise CRM Suite",
      description: "Comprehensive CRM solution for large enterprises",
      category: "Software",
      price: "1450000",
      currency: "INR",
      status: "active",
      icon: "desktop_windows",
      trend: "12.4"
    });
    
    this.createProduct({
      name: "Premium Support Plan",
      description: "24/7 priority support for enterprise customers",
      category: "Support",
      price: "825000",
      currency: "INR",
      status: "active",
      icon: "support_agent",
      trend: "8.2"
    });
    
    this.createProduct({
      name: "Cloud Storage 5TB",
      description: "Secure cloud storage solution for businesses",
      category: "Infrastructure",
      price: "675000",
      currency: "INR",
      status: "active",
      icon: "storage",
      trend: "-2.8"
    });
    
    this.createProduct({
      name: "API Integration Package",
      description: "Custom API integration services",
      category: "Services",
      price: "520000",
      currency: "INR",
      status: "active",
      icon: "integration_instructions",
      trend: "15.7"
    });

    // Sample deals
    this.createDeal({
      customerId: 1,
      title: "Enterprise CRM Implementation",
      companyName: "TechCorp Solutions",
      stage: "proposal",
      value: "850000",
      probability: 75
    });
    
    this.createDeal({
      customerId: 2,
      title: "Cloud Migration Project",
      companyName: "Innovate Industries",
      stage: "qualified",
      value: "525000",
      probability: 45
    });
    
    this.createDeal({
      customerId: 3,
      title: "Data Center Upgrade",
      companyName: "Global Enterprises",
      stage: "lead",
      value: "1275000",
      probability: 20
    });
    
    this.createDeal({
      customerId: 4,
      title: "DevOps Implementation",
      companyName: "NextGen Solutions",
      stage: "closed",
      value: "640000",
      probability: 100
    });

    // Sample tickets
    this.createTicket({
      ticketId: "TK-2384",
      customerId: 1,
      title: "Integration issue with third-party API",
      description: "Unable to connect to the payment gateway API",
      status: "open",
      priority: "high"
    });
    
    this.createTicket({
      ticketId: "TK-2383",
      customerId: 2,
      title: "Dashboard export not working correctly",
      description: "PDF exports are missing some data columns",
      status: "in progress",
      priority: "medium"
    });
    
    this.createTicket({
      ticketId: "TK-2382",
      customerId: 3,
      title: "Account settings update confirmation",
      description: "Not receiving confirmation emails after settings update",
      status: "open",
      priority: "low"
    });
    
    this.createTicket({
      ticketId: "TK-2381",
      customerId: 4,
      title: "Product catalog pricing discrepancy",
      description: "Prices shown in the catalog don't match checkout prices",
      status: "open",
      priority: "medium"
    });

    // Revenue metrics
    this.revenueMetrics.set(1, {
      id: 1,
      month: "Jan",
      year: 2023,
      value: "1800000",
      change: "10.2"
    });
    
    this.revenueMetrics.set(2, {
      id: 2,
      month: "Feb",
      year: 2023,
      value: "1950000",
      change: "8.5"
    });
    
    this.revenueMetrics.set(3, {
      id: 3,
      month: "Mar",
      year: 2023,
      value: "2100000",
      change: "7.8"
    });
    
    this.revenueMetrics.set(4, {
      id: 4,
      month: "Apr",
      year: 2023,
      value: "2250000",
      change: "7.2"
    });
    
    this.revenueMetrics.set(5, {
      id: 5,
      month: "May",
      year: 2023,
      value: "2400000",
      change: "6.7"
    });
    
    this.revenueMetrics.set(6, {
      id: 6,
      month: "Jun",
      year: 2023,
      value: "2550000",
      change: "6.3"
    });
    
    this.revenueMetrics.set(7, {
      id: 7,
      month: "Jul",
      year: 2023,
      value: "2325000",
      change: "-8.8"
    });
    
    this.revenueMetrics.set(8, {
      id: 8,
      month: "Aug",
      year: 2023,
      value: "2450000",
      change: "5.4"
    });
    
    this.revenueMetricCurrentId = 9;

    // Category sales
    this.categorySales.set(1, {
      id: 1,
      category: "Software",
      value: "1800000",
      percentage: "40"
    });
    
    this.categorySales.set(2, {
      id: 2,
      category: "Services",
      value: "1125000",
      percentage: "25"
    });
    
    this.categorySales.set(3, {
      id: 3,
      category: "Hardware",
      value: "900000",
      percentage: "20"
    });
    
    this.categorySales.set(4, {
      id: 4,
      category: "Support",
      value: "675000",
      percentage: "15"
    });
    
    this.categorySaleCurrentId = 5;
  }
}

export const storage = new MemStorage();
